[{"path":"https://cromanpa94.github.io/phruta/articles/Exporting_data_phruta.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"To export or not export phruta outputs","text":"export export phruta taxonomic names sequence alignments, exporting","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Exporting_data_phruta.html","id":"to-export-or-not-export-from-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"To export or not export from phruta","title":"To export or not export phruta outputs","text":"Assembling molecular dataset particular target taxa phruta can performed almost entirely saving objects workspace. topic covered introductory vignette phruta (Using phruta R package). However, situations, might desirable save outputs different phruta functions particular folders. tutorial cover specific situation. Specifically, reviewing phruta can used export .fasta .csv files generated different steps pipeline.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Exporting_data_phruta.html","id":"from-taxonomic-names-to-sequence-alignments-exporting-data","dir":"Articles","previous_headings":"Table of Contents","what":"From taxonomic names to sequence alignments, exporting data","title":"To export or not export phruta outputs","text":"introductory vignette phruta (Using phruta R package), assembled basic molecular dataset inferring phylogeny among three mammal genera. Let’s recreate tutorial, case, exporting intermediate files created using several functions. Note structure tutorial closely follows “Using phruta R package”. able follow tutorial even without reviewed introductory vignette. Please assume interested building phylogenetic tree following three genera: Felis, Vulpes, Phoca. three genera classified within Carnivora, mammalian order. Felis Vulpes classified different superfamilies within Fissipedia. Finally, Phoca part another suborder, Pinnipedia. ’re going root tree another mammal species, Chinese Pangolin (Manis pentadactyla). Users can select additional target species clades. However, simplicity, run analyses using three genera ingroup single outgroup species. far, decided taxonomic make analyses phruta. also need determine gene regions used analyses. Fortunately, mammals extensively studied comprehensive list potential gene regions analyzed already available. instance, use gene regions sampled Upham et al (2009). However, tutorial, simply try find gene regions well sampled target taxa. believe figuring best sampled gene regions genbank, instead providing gene names, potentially valuable working poorly studied groups (e.g. invertebrates). move , please make sure set working directory project. files saved directory. phruta politely ask writing files local directories. Let’s start loading phruta! Now, let’s look gene regions sampled target taxa. , step always necessary. groups, gene-level sampling standard (e.g. COI, 12S). However, structure gene sampling sometimes becomes blurry zoom taxonomically. instance, genes B can extensively sampled genus 1. However, genus 2 family mainly studied using genes Y Z. idea phruta try find gene regions extensively sampled across species target taxa. use gene.sampling.retrieve() function phruta. resulting data.frame, named gs.seqs example, contain list full names genes sampled genbank target taxa. search terms used , phruta able retrieve names 1741 gene regions. table summarize genes, sampling frequency calculated level species (see speciesSampling = TRUE argument ). Gene sampling search including genera Felis, Vulpes, Phoca ingroup taxa. Manis pentadactyla used outgroup. Thus, gene.sampling.retrieve() function provides estimate number species genbank matches taxonomic criteria sequences given gene region. Note estimates recovered gene.sampling.retrieve() good annotations researchers provided sequences deposited genbank. , generate preliminary table summarizing accession numbers combination taxa gene regions ’re interested sampling. However, note accession numbers expected final (curated) molecular dataset. instance, several sequences might dropped later taxonomic information curated. Now, assemble species-level summary accession numbers using acc.table.retrieve() function. simplicity, tutorial focus sampling gene regions sampled >30% species (targetGenes data.frame). acc.table object data.frame used downloading relevant gene sequences. case, dataset includes following information: Accession numbers relevant species gene regions examined tutorial. Feel free review dataset, make changes, add new species, samples, etc. integrity dataset critical next steps please take time review carefully. instance, let’s just make minor changes dataset: Let’s check new table looks now… Updated Table 2 minor corrections species names. updates table include adding sequences, using specific sequences (instead ones suggested phruta). Now, since ’re going retrieve sequences genbank using existing preliminary accession numbers table, use sq.retrieve.indirect() function phruta. ’m going spend time explain differences two versions sq.retrieve.* phruta. one ’re using tutorial, sq.retrieve.indirect(), retrieves sequences “indirectly” follows initial step generating table summarizing accession numbers (see acc.table.retrieve() function ). present information vignette using sq.retrieve.indirect() instead sq.retrieve.direct() first function way flexible allows correcting issues prior download sequence. instance, can add new sequences, species, populations resulting data.frame acc.table.retrieve(). Additionally, even manually assemble dataset accession numbers retrieved using sq.retrieve.indirect(). Instead, sq.retrieve.direct() best directly (.e. without potential input user) retrieve sequences target set taxa set gene regions. short, able catch errors using sq.retrieve.indirect() mistakes harder spot fix ’re using sq.retrieve.direct(). Note functionality sq.retrieve.direct() outlined “Using phruta defined target genes” vignette. still need retrieve sequences accessions table generated avobe using acc.table. sq.retrieve.indirect() function write resulting fasta files newly created folder 0.Sequences located working directory (please check download.sqs = TRUE argument). Next, ’re going make sure include sequences reliable species actually interested analyzing. , using sq.curate() function. need provide list taxonomic names filter incorrect sequences (filterTaxonomicCriteria argument). simplicity, criteria can genera ’re interested analyzing. Note outgroup’s name also included list. taxonomic information sequence retrieved genbank match strings, species dropped. specify whether sampling animals plants (kingdom argument). Finally, might already noticed gene regions can different names. instance, sometimes searches retrieve “cytochrome oxidase subunit 1” “cytochrome c oxidase subunit ” widely sampled genes target species. case, can combine sequences two files single file name COI. merge gene files, provide named list mergeGeneFiles argument sq.curate function. named list (tb.merged ) length corresponds number final files constructed. Running line code create folder 1.CuratedSequences containing (1) curated sequences original names, (2) curated sequences species-level names (renamed_* prefix), (3) table accession numbers (0.AccessionTable.csv), (4) summary taxonomic information species sampled files (1.Taxonomy.csv). ’ll use renamed_* 1.Taxonomy.csv files next steps. Let’s take look sampling per gene region 0.AccessionTable.csv table. 4. Preliminary accession number table ’ll now align sequences just curated. , just use sq.aln() default parameters. need indicate ’re interested aligning \"renamed\" fasta files 1.CuratedSequences folder. resulting multiple sequence alignments saved 2.Alignments folder. new folder, two types files: (1) raw alignments (file names 1.CuratedSequences) (2) alignments ambiguous sites removed (Masked_* prefix). Masked alignments created mask argument sq.aln set TRUE. case, one additional .csv file created alignments (0.Masked.Information_*). datasets list number sites masked alignment (1) gaps (NonGaps column), (2) sequence removed due elevated number gaps (removedPerGaps; controlled using threshold argument sq.aln), (3) removed directly masking step (removedMasking). Note , gene regions, making can fail. case, original alignment file saved 2.Alignments folder. Note use resulting alignments directly infer phylogenies. cover steps within phruta another vignette: “Phylogenetics phruta R package”. now, let’s wrap plot one (cool) alignments. Let’s first check raw alignments! figure showing raw alignments Now, masked alignments…!! figure showing curated alignments ’re done now!! Thanks following tutorial…:) total, vignette took 11 minutes render local machine. can now try run phruta using favorite groups organisms! Don’t forget check tutorials get touch find issues…Buena suerte!","code":"library(phruta) ##        ✅  Thank you for using the {phruta} R package!   ✅ ##  ##                         🙂Happy coding!!🙂 ##                        🍊🍍🍐🥝🥥🌶🥑🍒🥭 gs.seqs <- gene.sampling.retrieve(organism = c(\"Felis\", \"Vulpes\", \"Phoca\", \"Manis_pentadactyla\"),                                    speciesSampling = TRUE) targetGenes <- gs.seqs[gs.seqs$PercentOfSampledSpecies > 30,]  acc.table <- acc.table.retrieve(             clades  = c('Felis', 'Vulpes', 'Phoca'),             species = 'Manis_pentadactyla' ,             genes   = targetGenes$Gene,             speciesLevel = TRUE           ) acc.table$Species <- sub(\"P.\", \"Phoca \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"F.\", \"Felis \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"V.\", \"Vulpes \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"mitochondrial\", \"\", acc.table$Species) row.names(acc.table) <- NULL sq.retrieve.indirect(acc.table, download.sqs = TRUE) tb.merged <- list('COI' = c(\"cytochrome oxidase subunit 1\", \"cytochrome c oxidase subunit I\")) sq.curate(filterTaxonomicCriteria = 'Felis|Vulpes|Phoca|Manis',           mergeGeneFiles = tb.merged,           kingdom = 'animals',            folder = '0.Sequences',           removeOutliers = FALSE) sq.aln(folder = '1.CuratedSequences', FilePatterns = \"renamed\")"},{"path":"https://cromanpa94.github.io/phruta/articles/Future_phruta.html","id":"future-directions-for-phruta","dir":"Articles","previous_headings":"","what":"Future directions for phruta","title":"Future directions for phruta","text":"acknowledge functions phruta now limited cover basic aspects modern phylogenetic pipeline. However, ’m actively working improving phruta. Recent developments included: Expand taxonomic cleaning non-animal/plant groups (implemented v0.1.2) Taxonomic tree constraints (implemented v0.1.2) Partitioned analyses RAxML PartitionFinder (V2; V1 implemented v0.1.2) Rogue taxa identification (implemented v0.1.2) Faster functions mine genbank (implemented v0.1.2) Please stay tuned updates. Get touch questions. Open issues find anything relevant code, suggestions. input valuable! Feel free get touch well want request new functionality.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Advanced methods","text":"Working non-animal/plant groups phruta Creating taxonomic constraints phruta Running PartitionFinder phruta Partitioned analyses RAxML Identifying rogue taxa","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"working-with-non-animal-nor-plant-groups-in-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"Working with non-animal nor plant groups in phruta","title":"Advanced methods","text":"explained brief intro phruta, sq.curate() function primarily designed curate taxonomic datasets using gbif. Alto gbif extremely fast efficient, largely designed deal animals plants. ’re interested using gbif backbone curating sequence regardless kingdom use following approach: Note kingdom argument set NULL. However, indicated first vignette, gbif efficient retrieving accurate taxonomy provide details kingdom. Given species ’re interested animals, just use: also plants using plants instead animals kingdom argument. Now, interested following databases retrieve taxonomic information species database? latest version phruta allow users select desired database. databases follow taxize::classification() function. Options : ncbi, itis, eol, tropicos, nbn, worms, natserv, bold, wiki, pow. Please select one. Note gbif option taxize::classification() replaced internal gbif phruta. Now, let’s assume interested curating database using itis: Using alternative databases sometimes desirable. Please make sure review best database target group selecting one.","code":"taxonomy.retrieve(species_names=c(\"Felis_catus\", \"PREDICTED:_Vulpes\",                   \"Phoca_largha\", \"PREDICTED:_Phoca\" ,                   \"PREDICTED:_Manis\" , \"Felis_silvestris\" , \"Felis_nigripes\"),                   database='gbif', kingdom=NULL) taxonomy.retrieve(species_names=c(\"Felis_catus\", \"PREDICTED:_Vulpes\",                   \"Phoca_largha\", \"PREDICTED:_Phoca\" ,                   \"PREDICTED:_Manis\" , \"Felis_silvestris\" , \"Felis_nigripes\"),                   database='gbif', kingdom='animals') taxonomy.retrieve(species_names=c(\"Felis_catus\", \"PREDICTED:_Vulpes\",                   \"Phoca_largha\", \"PREDICTED:_Phoca\" ,                   \"PREDICTED:_Manis\" , \"Felis_silvestris\" , \"Felis_nigripes\"),                   database='itis')"},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"creating-taxonomic-constraints-in-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"Creating taxonomic constraints in phruta","title":"Advanced methods","text":"different reasons, phylogenetic analyses sometimes require tree constraints. phruta can automatically generate trees accordance taxonomy backbone topology. divide constraint trees two: (1) ingroup+outgroup (2) particular clades.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"ingroup-outgroup","dir":"Articles","previous_headings":"Table of Contents > Creating taxonomic constraints in phruta","what":"ingroup + outgroup","title":"Advanced methods","text":"constraint type, phruta create monophyletic groups taxonomic groups database (selected target columns). Finally, generate tree topology provided Topology argument. user provide species names outgroup taxa vector string fully match names taxonomy file. Tree constraints ingroup+outgroup (example shown based much limited number genes; see examples package).","code":"tree.constraint(                 taxonomy_folder = \"1.CuratedSequences\",                 targetColumns = c(\"kingdom\", \"phylum\", \"class\", \"order\",                                    \"family\", \"genus\", \"species_names\"),                 Topology = \"((ingroup), outgroup);\",                 outgroup = \"Manis_pentadactyla\"  )"},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"particular-clades","dir":"Articles","previous_headings":"Table of Contents > Creating taxonomic constraints in phruta","what":"Particular clades","title":"Advanced methods","text":"constraint type, phruta create constraint tree particular clades. instance, let’s assume need create tree constraining monophyly within two genera sister relationships: Note key aspect Topology argument. newick tree. Tree constraints clade (example shown based much limited number genes; see examples package).","code":"tree.constraint( taxonomy_folder = \"1.CuratedSequences\",                  targetColumns = c(\"kingdom\", \"phylum\", \"class\",                                     \"order\", \"family\", \"genus\", \"species_names\"),                  Topology = \"((Felis), (Phoca));\"  )"},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"running-partitionfinder-in-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"Running PartitionFinder in phruta","title":"Advanced methods","text":"current version phruta, users able run PartitionFinder v1 within R. , users provide name folder alignments stored, particular pattern file names (masked case), models run PartitionFinder. function download PartitionFinder, generate input files, run within R. output files new folder within working directory. Unfortunately, output files integrated current phruta pipeline. part new release. However, users can still perform gene-based partitioned analyses within RAxML can use PartitionFinder’s output files inform analyses outside phruta.","code":"sq.partitionfinderv1(folderAlignments = \"2.Alignments\",                     FilePatterns = \"Masked\",                     models = \"all\"  )"},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"partitioned-analyses-in-raxml","dir":"Articles","previous_headings":"Table of Contents","what":"Partitioned analyses in RAxML","title":"Advanced methods","text":"Users can now run partitioned analyses RAxML within phruta. approach implemented setting partitioned argument tree.raxml TRUE. now, partitions based genes analyzed. model used analyze partition. details partitioned analyses can customized passing arguments ips::raxml.","code":"tree.raxml(folder = \"2.Alignments\", FilePatterns = \"Masked\",            raxml_exec = \"raxmlHPC\", Bootstrap = 100,            outgroup = \"Manis_pentadactyla\",            partitioned=T )"},{"path":"https://cromanpa94.github.io/phruta/articles/Phruta_advanced.html","id":"identifying-rogue-taxa","dir":"Articles","previous_headings":"Table of Contents","what":"Identifying rogue taxa","title":"Advanced methods","text":"phruta can help users run RogueNaRok implemented Rogue R package. Users can examine whether rogue taxa excluded analyses. tree.roguetaxa() uses bootstrap trees generated using tree.raxml() function along associated best tree identify rogue taxa.","code":"tree.roguetaxa(folder = \"3.Phylogeny\")"},{"path":"https://cromanpa94.github.io/phruta/articles/Phylogenetics_phruta.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Phylogenetics with phruta","text":"Installing RAxML Installing PATHd-8 treePL Phylogenetic inference phruta RAxML Tree dating phruta","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Phylogenetics_phruta.html","id":"installing-raxml","dir":"Articles","previous_headings":"Table of Contents","what":"Installing RAxML","title":"Phylogenetics with phruta","text":"MacOS, RAxML can easily installed PATH using one two lines conda: OS (Windows, Linux), please follow instructions listed official RAxML website RAxML installed computer, open R make sure following line doesn’t throw error. Depending RAxML installed, may want check RAxML called terminal using raxmlHPC raxmlHPC. string needs passed tree.raxml() using argument raxml_exec. Please note argument corresponds exec argument ips::raxml(). Finally, note RStudio sometimes issues finding stuff path using system(). ’re using macOS, try starting RStudio command line running following line: OS, might better simply avoid using RStudio ’re interested running phylogenetic functions phruta.","code":"conda install -c bioconda/label/cf201901 raxml conda install -c bioconda raxml system(\"raxmlHPC\") open /Applications/RStudio.app"},{"path":"https://cromanpa94.github.io/phruta/articles/Phylogenetics_phruta.html","id":"installing-pathd-8-and-treepl","dir":"Articles","previous_headings":"Table of Contents","what":"Installing PATHd-8 and treePL","title":"Phylogenetics with phruta","text":"excellent guides installing PATHd-8 treePL. , summarize two potentially relevant options. First, can use Brian O’Meara’s approach installing PATHd-8 MacOs linux. summarize code following link. Windows users, please use compiled version software provided following link. Second, can use homebrew install treePL (Windows, MacOS, Linux), thanks Jonathan Chang. Please check following link) ’re interested running brew Windows Linux.","code":"brew install brewsci/bio/treepl"},{"path":"https://cromanpa94.github.io/phruta/articles/Phylogenetics_phruta.html","id":"phylogenetic-inference-with-phruta-and-raxml","dir":"Articles","previous_headings":"Table of Contents","what":"Phylogenetic inference with phruta and RAxML","title":"Phylogenetics with phruta","text":"Phylogenetic inference conducted using tree.raxml() function. need indicate aligned sequences located (folder argument), patterns files folder (FilePatterns argument; “Masked_” case). ’ll run total 100 boostrap replicates set outgroup “Manis_pentadactyla”. trees saved 3.Phylogeny. Likely, bipartitions tree, “RAxML_bipartitions.phruta”, relevant. 3.Phylogeny also includes additional RAxML-related input output files. Finally, let’s perform tree dating phylogeny using secondary calibrations extracted Scholl Wiens (2016). study curated potentially comprenhensive reliable set trees summarize temporal dimension evolution across tree life. phruta, trees Scholl Wiens (2016) renamed match taxonomic groups.","code":"tree.raxml(folder='2.Alignments',             FilePatterns= 'Masked_',             raxml_exec='raxmlHPC',             Bootstrap=100,             outgroup =\"Manis_pentadactyla\")"},{"path":"https://cromanpa94.github.io/phruta/articles/Phylogenetics_phruta.html","id":"tree-dating-in-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"Tree dating in phruta","title":"Phylogenetics with phruta","text":"Tree dating performed using tree.dating() function phruta. provide name folder containing 1.Taxonomy.csv file created sq.curate(). also indicate name folder containing RAxML_bipartitions.phruta file. scale phylogeny using treePL. Running line result new folder 4.Timetree, including different time-calibrated phylogenies obained () associated secondary calibrations used analyses. found overlapping calibration points (family-level constraints): ’s resulting time-calibrated phylogeny. whole process took ~20 minutes complete computer (16 gb RAM, i5). Time-calibrated phylogeny target taxa. Analyses performed within phruta R package.","code":"tree.dating(taxonomyFolder=\"1.CuratedSequences\",              phylogenyFolder=\"3.Phylogeny\",              scale='treePL')"},{"path":"https://cromanpa94.github.io/phruta/articles/Using_phruta.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Using the phruta R package","text":"Clade names sequence alignments Saving intermediate files","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/Using_phruta.html","id":"intro-tutorial-clade-names-to-sequence-alignments","dir":"Articles","previous_headings":"Table of Contents","what":"Intro tutorial: Clade names to sequence alignments","title":"Using the phruta R package","text":"Let’s learn phruta works assembling molecular dataset species level mammal clades. tutorial, assume need build tree following three genera: Felis, Vulpes, Phoca. three genera classified within order Carnivora. Felis Vulpes classified different superfamilies within suborder Fissipedia. Phoca part another suborder, Pinnipedia. ’re going root tree another mammal species, Chinese Pangolin (Manis pentadactyla). Please note can select many target clades species need. However, simplicity, run analyses using three genera ingroup single outgroup species. decided taxonomic make analyses. However, also need determine genes use infer phylogeny. Fortunately, mammals extensively studied. instance, comprehensive list potential gene regions analyzed species clade already available Upham et al (2009). tutorial, try find gene regions well sampled specifically target taxa. believe figuring best sampled gene regions genbank, instead providing names, potentially valuable working poorly studied groups. tutorial, objects created using functions phruta stored environment. None files exported working directory. instead interested exporting outcomes particular functions phruta, please follow tutorial “export export `phruta` outputs”. vignettes aim assemble molecular dataset set taxa approach phruta. Let’s get started tutorial loading phruta! Let’s now look gene regions extensively sampled target taxa. , use gene.sampling.retrieve() function phruta. resulting data.frame, named gs.seqs example, contain list full names genes sampled genbank target taxa. search terms, phruta able retrieve names 1387 gene regions. frequency estimates per gene based inter-specific sampling. Gene sampling search including genera Felis, Vulpes, Phoca ingroup taxa. Manis pentadactyla used outgroup. gene.sampling.retrieve() provides estimate number species genbank (matching taxonomic criteria search term) sequences given gene region. However, estimate good annotations genes deposited genbank. , generate preliminary summary accession numbers sampled combination target taxa gene regions. fact, accession numbers expected final (curated) molecular dataset. Using acc.table.retrieve() function, assemble species-level summary accession numbers (hence speciesLevel = TRUE argument). simplicity, tutorial focus sampling gene regions sampled >30% species (targetGenes data.frame). acc.table object data.frame later going used downloading locally relevant gene sequences. case, dataset includes following information: Accession numbers relevant species gene regions examined tutorial. Feel free review dataset, make changes, add new species, samples, etc. integrity dataset critical next steps please take time review carefully. Let’s just make minor changes dataset: Let’s check new table looks now… Updated Table 2 minor corrections species names. updates table include adding sequences, using specific sequences (instead ones suggested phruta). Now, since ’re going retrieve sequences genbank using existing preliminary accession numbers table, use sq.retrieve.indirect() function phruta. Please note two versions sq.retrieve.* phruta . one ’re using tutorial, sq.retrieve.indirect(), retrieves sequences “indirectly” necessarily follows initial step generating table summarizing target accession numbers (see acc.table.retrieve() function ). present information vignette using sq.retrieve.indirect() instead sq.retrieve.direct() first function way flexible. Specifically, allows correcting issues prior downloading/retrieving sequence. instance, can add new sequences, species, populations resulting data.frame acc.table.retrieve(). Additionally, even manually assemble dataset accession numbers retrieved using sq.retrieve.indirect(). Instead, sq.retrieve.direct() best directly (.e. without input user) retrieve sequences target set taxa set gene regions. short, able catch errors using sq.retrieve.indirect() mistakes harder spot fix ’re using sq.retrieve.direct(). Now, still need retrieve sequences accessions table generated using acc.table. Note since specified download.sqs = FALSE, sequences returned list stored global environment. decide download sequences working directory using download.sqs = TRUE, phruta write resulting fasta files newly created folder 0.Sequences located working directory. latter option covered “export export `phruta` outputs” vignette. ’re now going make sure include sequences reliable species actually interested analyzing. ’re going use sq.curate() function . provide list taxonomic criteria filter incorrect sequences (filterTaxonomicCriteria argument). instance, simply provide vector genera ’re interested analyzing. Note outgroup’s name also included among target taxa. taxonomic information sequence retrieved genbank match strings, species dropped. specify whether sampling animals plants (kingdom argument). Finally, might already noticed , sometimes, gene regions alternative names. case, going merge “cytochrome oxidase subunit 1” “cytochrome c oxidase subunit ” single file named COI. merge gene files curation step, provide named list mergeGeneFiles argument sq.curate() function. named list (tb.merged tutorial) length equals number final files result merging target gene files. Note , since ’re downloading anything working directory, need pass downloaded sequences (sqs.downloaded object generated using sq.retrieve.indirect() function) sqs.object argument sq.curate(). Running sq.curate() function create object class list includes (1) curated sequences original names, (2) curated sequences species-level names (renamed_* prefix), (3) accession numbers table (AccessionTable), (4) summary taxonomic information species sampled files (Taxonomy.csv). 4. Preliminary accession number table Now, ’ll align sequences just curated. , just use sq.aln() default parameters. ’re passing output sq.curate(), sqs.curated, using sqs.object argument sq.aln(). resulting multiple sequence alignments saved sqs.aln() object, list. gene regions, access original alignment (Aln.Original), masked one (Aln.Masked), information masking process. Note use resulting alignments infer phylogenies. cover steps within phruta another vignette: “Phylogenetics phruta R package”. now, let’s wrap plot one cool alignments. Let’s first check raw alignments. figure showing raw alignments Now, masked alignments… figure showing curated alignments Note share resulting workspace coworkers add supplement article!! total, script took 9 minutes run local machine. can now try run phruta favorite group organisms! Don’t forget check tutorials…Buena suerte!","code":"library(phruta) ##        ✅  Thank you for using the {phruta} R package!   ✅ ##  ##                         🙂Happy coding!!🙂 ##                        🍊🍍🍐🥝🥥🌶🥑🍒🥭 gs.seqs <- gene.sampling.retrieve(organism = c(\"Felis\", \"Vulpes\", \"Phoca\", \"Manis_pentadactyla\"),                                    speciesSampling = TRUE) targetGenes <- gs.seqs[gs.seqs$PercentOfSampledSpecies > 30,]  acc.table <- acc.table.retrieve(             clades  = c('Felis', 'Vulpes', 'Phoca'),             species = 'Manis_pentadactyla',             genes = targetGenes$Gene,             speciesLevel = TRUE           ) acc.table$Species <- sub(\"P.\", \"Phoca \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"F.\", \"Felis \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"V.\", \"Vulpes \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"mitochondrial\", \"\", acc.table$Species) row.names(acc.table) <- NULL sqs.downloaded <- sq.retrieve.indirect(acc.table = acc.table, download.sqs = FALSE) tb.merged <- list('COI' = c(\"cytochrome oxidase subunit 1\", \"cytochrome c oxidase subunit I\")) sqs.curated <- sq.curate(filterTaxonomicCriteria = 'Felis|Vulpes|Phoca|Manis',                          mergeGeneFiles = tb.merged,                          kingdom = 'animals',                           sqs.object = sqs.downloaded,                          removeOutliers = FALSE) sqs.aln <- sq.aln(sqs.object = sqs.curated)"},{"path":"https://cromanpa94.github.io/phruta/articles/Using_phruta.html","id":"saving-intermediate-files","dir":"Articles","previous_headings":"Table of Contents","what":"Saving intermediate files","title":"Using the phruta R package","text":"Note current vignette structured functions used tutorial won’t write anything working directory. advantage approach simply save workspace make pipeline fully reproducible others. However, sometimes molecular dataset simply large analyzed R. cases, phruta able export relevant files folder created within working directory. ’re interested saving partial outputs, please follow Exporting sequences using phruta R package vignette associated package.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/phruta.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Getting started with phruta","text":"phruta en Español? phruta? Functions phruta","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/phruta.html","id":"phruta-en-español","dir":"Articles","previous_headings":"Table of Contents","what":"phruta en Español","title":"Getting started with phruta","text":"[Placeholder]","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/phruta.html","id":"what-is-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"What is phruta?","title":"Getting started with phruta","text":"phruta package designed simplify basic phylogenetic pipeline R. phruta designed allow scientists different backgrounds assemble reproducible phylogenies minimal code possible. code phruta run within program (R) data intermediate steps either stored environment exported locally independent folders. code phruta run within environment, aspect increases reproducibility analysis. phruta looks potentially (phylogenetically) relevant gene regions given set taxa, retrieves gene sequences, combine newly downloaded local gene sequences, performs sequence alignment, phylogenetic inference, tree dating. phruta largely wrapper alternative R packages software.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/phruta.html","id":"functions-in-phruta","dir":"Articles","previous_headings":"Table of Contents","what":"Functions in phruta","title":"Getting started with phruta","text":"current release phruta includes set eight major functions. eight functions form pipeline within phruta output time-calibrated phylogeny. However, users interested using files stage can run function independently. Note functions primary output sequences (aligned unaligned) listed sq.*. files output phylogenies (time-calibrated ) listed tree.*. First, distribution gene sampled given organism set taxa can explored using acc.gene.sampling function. function return table summarizes either distribution genes sampled search term general specifically across species. Second, given list target organisms, users can retrieve list accession numbers relevant search using acc.table.retrieve(). Instead directly downloading sequences genbank (see sq.retrieve.direct() ), retrieving accession numbers allow users control sequences used analyses. Note users can also curate content dataset obtained using sq.retrieve.direct(). Third, users download gene sequences. Sequences can download using sq.retrieve.indirect() accession numbers retrieved using acc.table.retrieve() function. preferred option within phruta. Additionally, users can directly download gene sequences using sq.retrieve.direct() function. sq.retrieve.indirect() sq.retrieve.direct() functions save gene sequences fasta files located new directory named 0.Sequences. Fourth, sq.add() allows users include local sequences retrieved genbank previous step. function saves resulting fasta files two directories, combined sequences 0.Sequences local sequences 0.AdditionalSequences (originally downloaded sequences moved 0.0.OriginalDownloaded step). Note sq.add() optional. Fifth, sq.curate() function filters unreliable sequences based information listed genbank (e.g. PREDICTED) taxonomic information provided user. Specifically, function retrieves taxonomic information Global Biodiversity Information Facility (GBIF) database’s taxonomic backbone (see alternatives advanced vignette phruta). given species belongs non-target group, species dropped analyses. function automatically corrects taxonomy renames sequences. Sixth, sq.aln() performs multiple sequence alignment fasta files. Currently, phruta uses DECIPHER R package, . package allows adjusting sequence orientation masking (removing ambiguous sites). final two functions phruta focus tree inference dating. two functions depend external software needs installed (tested) running. Please make sure RAxML PATHd-8 treePL installed can called within R using system() function. Note can choose PATHd-8 treePL. details install RAxML provided phylogenetic vignette phruta. Similarly, provide details install PATHd-8 treePL vignette. Seventh, tree.raxml() function allows users perform tree inference RAxML sequences given folder. wrapper ips::raxml() arguments can customized. current release phruta can manage partitioned unpartitioned analyses. Starting constrained trees allowed. Eight, tree.dating() enables users perform time-calibrations given phylogeny using geiger::congruify.phylo(). phruta includes basic set comprehensively sampled, time-calibrated phylogenies used extract secondary calibrations target phylogeny. Note sampling phylogenies can examined using data(SW.phruta). Please make sure least two groups common phylogenies. Similarly, users can choose run either PATHd-8 treePL.","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/usando_phruta.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Usando el paquete de R phruta","text":"Desde nombres taxonomicos alineamientos Guardando objetos intermedios","code":""},{"path":"https://cromanpa94.github.io/phruta/articles/usando_phruta.html","id":"desde-nombres-taxonomicos-a-alineamientos","dir":"Articles","previous_headings":"Table of Contents","what":"Desde nombres taxonomicos a alineamientos","title":"Usando el paquete de R phruta","text":"Let’s learn phruta works assembling molecular dataset species level mammal clades. tutorial, assume need build tree following three genera: Felis, Vulpes, Phoca. three genera classified within order Carnivora. Felis Vulpes classified different superfamilies within suborder Fissipedia. Phoca part another suborder, Pinnipedia. ’re going root tree another mammal species, Chinese Pangolin (Manis pentadactyla). Please note can select many target clades species need. However, simplicity, run analyses using three genera ingroup single outgroup species. decided taxonomic make analyses. However, also need determine genes use infer phylogeny. Fortunately, mammals extensively studied. instance, comprehensive list potential gene regions analyzed species clade already available Upham et al (2009). tutorial, try find gene regions well sampled specifically target taxa. believe figuring best sampled gene regions genbank, instead providing names, potentially valuable working poorly studied groups. tutorial, objects created using functions phruta stored environment. None files exported working directory. instead interested exporting outcomes particular functions phruta, please follow tutorial “export export `phruta` outputs”. vignettes aim assemble molecular dataset set taxa approach phruta. Let’s get started tutorial loading phruta! Let’s now look gene regions extensively sampled target taxa. , use gene.sampling.retrieve() function phruta. resulting data.frame, named gs.seqs example, contain list full names genes sampled genbank target taxa. search terms, phruta able retrieve names 1741 gene regions. frequency estimates per gene based inter-specific sampling. Gene sampling search including genera Felis, Vulpes, Phoca ingroup taxa. Manis pentadactyla used outgroup. gene.sampling.retrieve provides estimate number species genbank (matching taxonomic criteria search term) sequences given gene region. However, estimate good annotations genes deposited genbank. , generate preliminary summary accession numbers sampled combination target taxa gene regions. fact, accession numbers expected final (curated) molecular dataset. Using acc.table.retrieve function, assemble species-level summary accession numbers (hence speciesLevel = TRUE argument). simplicity, tutorial focus sampling gene regions sampled >30% species (targetGenes data.frame). acc.table object data.frame later going used downloading locally relevant gene sequences. case, dataset includes following information: Accession numbers relevant species gene regions examined tutorial. Feel free review dataset, make changes, add new species, samples, etc. integrity dataset critical next steps please take time review carefully. Let’s just make minor changes dataset: Let’s check new table looks now… Updated Table 2 minor corrections species names. updates table include adding sequences, using specific sequences (instead ones suggested phruta). Now, since ’re going retrieve sequences genbank using existing preliminary accession numbers table, use sq.retrieve.indirect function phruta. Please note two versions sq.retrieve.* phruta . one ’re using tutorial, sq.retrieve.indirect, retrieves sequences “indirectly” necessarily follows initial step generating table summarizing target accession numbers (see acc.table.retrieve function ). present information vignette using sq.retrieve.indirect instead sq.retrieve.direct first function way flexible. Specifically, allows correcting issues prior downloading/retrieving sequence. instance, can add new sequences, species, populations resulting data.frame acc.table.retrieve. Additionally, even manually assemble dataset accession numbers retrieved using sq.retrieve.indirect. Instead, sq.retrieve.direct best directly (.e. without input user) retrieve sequences target set taxa set gene regions. short, able catch errors using sq.retrieve.indirect mistakes harder spot fix ’re using sq.retrieve.direct. Now, still need retrieve sequences accessions table generated using acc.table. Note since specified download.sqs = FALSE, sequences returned list stored global environment. decide download sequences working directory using download.sqs = TRUE, phruta write resulting fasta files newly created folder 0.Sequences located working directory. latter option covered “export export `phruta` outputs” vignette. ’re now going make sure include sequences reliable species actually interested analyzing. ’re going use sq.curate function . provide list taxonomic criteria filter incorrect sequences (filterTaxonomicCriteria argument). instance, simply provide vector genera ’re interested analyzing. Note outgroup’s name also included among target taxa. taxonomic information sequence retrieved genbank match strings, species dropped. specify whether sampling animals plants (kingdom argument). Finally, might already noticed , sometimes, gene regions alternative names. case, going merge “cytochrome oxidase subunit 1” “cytochrome c oxidase subunit ” single file named COI. merge gene files curation step, provide named list mergeGeneFiles argument sq.curate function. named list (tb.merged tutorial) length equals number final files result merging target gene files. Note , since ’re downloading anything working directory, need pass downloaded sequences (sqs.downloaded object generated using sq.retrieve.indirect function) sqs.object argument sq.curate. Running sq.curate function create object class list includes (1) curated sequences original names, (2) curated sequences species-level names (renamed_* prefix), (3) accession numbers table (AccessionTable), (4) summary taxonomic information species sampled files (Taxonomy.csv). 4. Preliminary accession number table Now, ’ll align sequences just curated. , just use sq.aln default parameters. ’re passing output sq.curate, sqs.curated, using sqs.object argument sq.aln. resulting multiple sequence alignments saved sqs.aln object, list. gene regions, access original alignment (Aln.Original), masked one (Aln.Masked), information masking process. Note use resulting alignments infer phylogenies. cover steps within phruta another vignette: “Phylogenetics phruta R package”. now, let’s wrap plot one cool alignments. Let’s first check raw alignments. figure showing raw alignments Now, masked alignments… figure showing curated alignments Note share resulting workspace coworkers add supplement article!! total, script took 10 minutes run local machine. can now try run phruta favorite group organisms! Don’t forget check tutorials…Buena suerte!","code":"library(phruta) ##        ✅  Thank you for using the {phruta} R package!   ✅ ##  ##                         🙂Happy coding!!🙂 ##                        🍊🍍🍐🥝🥥🌶🥑🍒🥭 gs.seqs <- gene.sampling.retrieve(organism = c(\"Felis\", \"Vulpes\", \"Phoca\", \"Manis_pentadactyla\"),                                    speciesSampling = TRUE) targetGenes <- gs.seqs[gs.seqs$PercentOfSampledSpecies > 30,]  acc.table <- acc.table.retrieve(             clades  = c('Felis', 'Vulpes', 'Phoca'),             species = 'Manis_pentadactyla',             genes = targetGenes$Gene,             speciesLevel = TRUE           ) acc.table$Species <- sub(\"P.\", \"Phoca \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"F.\", \"Felis \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"V.\", \"Vulpes \", acc.table$Species, fixed = TRUE) acc.table$Species <- sub(\"mitochondrial\", \"\", acc.table$Species) row.names(acc.table) <- NULL sqs.downloaded <- sq.retrieve.indirect(acc.table = acc.table, download.sqs = FALSE) tb.merged <- list('COI' = c(\"cytochrome oxidase subunit 1\", \"cytochrome c oxidase subunit I\")) sqs.curated <- sq.curate(filterTaxonomicCriteria = 'Felis|Vulpes|Phoca|Manis',                          mergeGeneFiles = tb.merged,                          kingdom = 'animals',                           sqs.object = sqs.downloaded,                          removeOutliers = FALSE) sqs.aln <- sq.aln(sqs.object = sqs.curated)"},{"path":"https://cromanpa94.github.io/phruta/articles/usando_phruta.html","id":"guardando-objetos-intermedios","dir":"Articles","previous_headings":"Table of Contents","what":"Guardando objetos intermedios","title":"Usando el paquete de R phruta","text":"Note current vignette structured functions used tutorial won’t write anything working directory. advantage approach simply save workspace make pipeline fully reproducible others. However, sometimes molecular dataset simply large analyzed R. cases, phruta able export relevant files folder created within working directory. ’re interested saving partial outputs, please follow Exporting sequences using phruta R package vignette associated package.","code":""},{"path":"https://cromanpa94.github.io/phruta/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cristian Roman Palacios. Author, maintainer. Anna Krystalli. Reviewer. Rayna Harris. Reviewer. Frederick Boehm. Reviewer.","code":""},{"path":"https://cromanpa94.github.io/phruta/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Román-Palacios, C. (2021). phruta R package: Phylogenetic Reconstruction Time-dating.","code":"@Misc{,   title = {The phruta R package: Phylogenetic Reconstruction and Time-dating},   author = {Cristian Román-Palacios},   year = {2021}, }"},{"path":[]},{"path":[]},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"what-is-phruta","dir":"","previous_headings":"","what":"What is phruta?","title":"Phylogenetic Reconstruction and Time-dating","text":"phruta R package designed simplify basic phylogenetic pipeline. code run within program data intermediate steps saved independent folders (optional). phruta retrieves gene sequences, combines newly downloaded local gene sequences, performs sequence alignments, basic phylogenetic inference.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"who-should-consider-using-phruta","dir":"","previous_headings":"","what":"Who should consider using phruta","title":"Phylogenetic Reconstruction and Time-dating","text":"main functions phruta R package allow quick mining curation GenBank sequences. package designed students researchers interested generating species-level genetic datasets particular sets taxa. Specifically, clade group species mind, phruta help assemble molecular dataset information available GenBank.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"why-use-phruta","dir":"","previous_headings":"","what":"Why use phruta?","title":"Phylogenetic Reconstruction and Time-dating","text":"phruta simplifies phylogenetic pipeline, increases reproducibility, helps organizing information used infer molecular phylogenies.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"how-is-phruta-different-from-other-software","dir":"","previous_headings":"","what":"How is phruta different from other software?","title":"Phylogenetic Reconstruction and Time-dating","text":"phruta two core functions. main applications functions briefly outlined : sq.retrieve.direct() sq.retrieve.indirect(): functions downloads sequences genbank (nucleotide database) particular taxa (taxonomic groups particular species) list genes. sq.curate(): sequences downloaded genbank, function curates sequences within examined genes detecting sequence outliers using taxonomic information. addition two main functions, users able align downloaded sequences, infer phylogenetic trees, calibrate phylogenies using additional functions phruta.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"installing-phruta","dir":"","previous_headings":"","what":"Installing phruta","title":"Phylogenetic Reconstruction and Time-dating","text":"phruta currently available GitHub. can easily installed using following code. Please make sure R packages msa, DECIPHER, Biostrings, odseq correctly installed. interested using development version phruta, please install using following code:","code":"library(devtools)  install_github(\"cromanpa94/phruta\") library(devtools) install_github(\"cromanpa94/phruta\", ref = \"dev\")"},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"running-phruta-from-shiny","dir":"","previous_headings":"","what":"Running phruta from shiny","title":"Phylogenetic Reconstruction and Time-dating","text":"constructed shiny app hosts phruta enables users run basic functions less-code intensive environment. app, salphycon currently available following GitHub repo. shiny app live point 2023.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"installing-raxml-","dir":"","previous_headings":"","what":"Installing RAxML","title":"Phylogenetic Reconstruction and Time-dating","text":"MacOS, RAxML can easily installed PATH using one two lines conda: {bash eval=FALSE} conda install -c bioconda/label/cf201901 raxml {bash eval=FALSE} conda install -c bioconda raxml OS (Windows, Linux), please follow instructions listed official RAxML website RAxML installed computer, open R make sure following line doesn’t throw error. {r eval=FALSE} system(\"raxmlHPC\") Depending RAxML installed, may want check RAxML called terminal using raxmlHPC raxmlHPC. string needs passed tree.raxml using argument raxml_exec. Please note argument corresponds exec argument ips::raxml. Finally, note RStudio sometimes issues finding stuff path using system(). ’re using macOS, try starting RStudio command line running following line: {bash eval=FALSE} open /Applications/RStudio.app OS, might better simply avoid using RStudio ’re interested running phylogenetic functions phruta.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"installing-pathd-8-and-treepl-","dir":"","previous_headings":"","what":"Installing PATHd-8 and treePL","title":"Phylogenetic Reconstruction and Time-dating","text":"excellent guides installing PATHd-8 treePL. , summarize two potentially relevant options. First, can use Brian O’Meara’s approach installing PATHd-8 MacOs linux. summarize code following link. Windows users, please use compiled version software provided following link. Second, can use homebrew install treePL (Windows, MacOS, Linux), thanks Jonathan Chang. {bash eval = F} brew install brewsci/bio/treepl Please check following link) ’re interested running brew Windows Linux.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"running-phruta-from-rstudio-while-using-macos","dir":"","previous_headings":"","what":"Running phruta from Rstudio while using MacOS?","title":"Phylogenetic Reconstruction and Time-dating","text":"’re interested running phylogenetic analyses, please make sure open RStudio using following code terminal: {bash eval=FALSE} open /Applications/RStudio.app","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"dedication","dir":"","previous_headings":"","what":"Dedication","title":"Phylogenetic Reconstruction and Time-dating","text":"package dedicated mom. still lots things learn . always admiration. logo features Palenquera Cartagena (Colombia). many folks, Palenqueras just Black woman ones sell fruits particular Colombian turistic areas. However, palenqueras Palenque central Black identity Colombia, Latin America, across America: “Palenque first free African town Americas”](https://en.wikipedia.org/wiki/San_Basilio_de_Palenque).","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"etymology","dir":"","previous_headings":"","what":"Etymology","title":"Phylogenetic Reconstruction and Time-dating","text":"Fruta Spanish word Fruit. English ph sounds F Spanish. phruta, ph relative phylogenetics. pronounce phruta just fruta Spanish.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"additional-resources","dir":"","previous_headings":"","what":"Additional resources","title":"Phylogenetic Reconstruction and Time-dating","text":"details functions implemented phruta can found different vignettes associated package website.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"alternatives-to-phruta","dir":"","previous_headings":"","what":"Alternatives to phruta","title":"Phylogenetic Reconstruction and Time-dating","text":"Similar functionalities assembling curated molecular datasets phylogenetic analyses can found phylotaR SuperCRUNCH. However, note phylotaR limited downloading curating sequences (e.g. doesn’t align sequences). Similarly, SuperCRUNCH curates local sequences. phruta closer SUPERSMART “new” associated R workflow SUPERSMARTR. However, applications different packages part SUPERSMARTR simplified phruta.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Phylogenetic Reconstruction and Time-dating","text":"Please see contributing guide.","code":""},{"path":"https://cromanpa94.github.io/phruta/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Phylogenetic Reconstruction and Time-dating","text":"Please see package DESCRIPTION package authors.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/SW.phruta.html","id":null,"dir":"Reference","previous_headings":"","what":"Scholl and Wiens (2016) phylogenies — SW.phruta","title":"Scholl and Wiens (2016) phylogenies — SW.phruta","text":"Time-calibrated trees Scholl Wiens (2016). phruta uses calibrate resulting phylogenies.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/SW.phruta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scholl and Wiens (2016) phylogenies — SW.phruta","text":"","code":"data(SW.phruta)"},{"path":"https://cromanpa94.github.io/phruta/reference/SW.phruta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scholl and Wiens (2016) phylogenies — SW.phruta","text":"object class \"multiphylo\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/SW.phruta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Scholl and Wiens (2016) phylogenies — SW.phruta","text":"Publication","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/SW.phruta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scholl and Wiens (2016) phylogenies — SW.phruta","text":"Scholl, Joshua P., John J. Wiens. \"Diversification rates species richness across Tree Life.\" Proceedings Royal Society B: Biological Sciences 283.1838 (2016): 20161334.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","title":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","text":"Retrieve accession numbers titles searches genbank. function useful exploring gene-, population-, species-level sampling genbank.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","text":"","code":"acc.retrieve(   organism,   acc.num = FALSE,   gene = NULL,   speciesLevel = FALSE,   npar = 2,   nSearchesBatch = 499 )"},{"path":"https://cromanpa94.github.io/phruta/reference/acc.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","text":"organism name single taxon (character). acc.num Logical indicating whether organism actually vector accession numbers. gene name single gene region (character; optional). speciesLevel Whether result species-level dataset (logical). npar Number parallel searches (default probably best option). nSearchesBatch Number searches per batch","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","text":"data.frame","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve accession numbers and titles for a genbank search — acc.retrieve","text":"","code":"if (FALSE) { acc.retrieve(organism=\"Vulpes\", gene = 'cytb', species=TRUE) }"},{"path":"https://cromanpa94.github.io/phruta/reference/acc.table.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","title":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","text":"Retrieve accession numbers titles complex searches conducted genbank. Note function depends acc.retrieve actually uses expand.grid find relevant organism/gene combinations genbank.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.table.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","text":"","code":"acc.table.retrieve(   clades = NULL,   species = NULL,   genes = NULL,   speciesLevel = NULL,   npar = 2,   nSearchesBatch = 499 )"},{"path":"https://cromanpa94.github.io/phruta/reference/acc.table.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","text":"clades vector clade names (character). Note can either name clade (e.g. Apis) code NCBI (e.g. txid7459). species vector species names (logical). Note can either name clade (e.g. Apis) code NCBI (e.g. txid7459). genes vector gene names (character; optional). speciesLevel Whether result species-level dataset (logical). npar Number parallel searches (default probably best option). nSearchesBatch Number searches per batch","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.table.retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","text":"data.frame","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/acc.table.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve accession numbers and titles for a given combination of species and genes in genbank — acc.table.retrieve","text":"","code":"if (FALSE) { acc.table.retrieve(  clades  = c('Felis', 'Vulpes', 'Phoca'),  species = 'Manis_pentadactyla' ,  genes   = c(\"A2AB\",\"ADORA3\",\"ADRB2\",\"APOB\",             \"APP\",\"ATP7\",\"BCHE\",\"BDNF\",             \"BMI1\",\"BRCA1\",\"BRCA2\",\"CNR1\",             \"COI\",\"CREM\",\"CYTB\",\"DMP1\",             \"EDG1\",\"ENAM\",\"FBN1\",\"GHR\",             \"IRBP\",\"ND1\",\"ND2\",\"PLCB4\",             \"PNOC\",\"RAG1a\",\"RAG1b\",\"RAG2\",             \"TTN\",\"TYR1\",\"VWF\"),  speciesLevel = FALSE ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/gene.sampling.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","title":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","text":"function retrieves gene names given organism genbank. function useful explore genes widely sampled given taxon genbank. However, note performance gene.sampling.retrieve entirely dependant quality submissions genbank. instance, sequences genbank (nucleotide) information sequenced region, function provide reliable estimates sampling frequency gene database. recommend using function caution, additional information genes widely sampled target group(s) interest.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/gene.sampling.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","text":"","code":"gene.sampling.retrieve(   organism,   speciesSampling = TRUE,   npar = 2,   nSearchesBatch = 499 )"},{"path":"https://cromanpa94.github.io/phruta/reference/gene.sampling.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","text":"organism vector taxonomic groups (character). speciesSampling Whether results species-level (logical). npar Number simultaneous searches (character; optional). default 2 generally fast enough exceed maximum number connections genbank. nSearchesBatch Number searches per batch","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/gene.sampling.retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","text":"data.frame","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/gene.sampling.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the distribution of genes for given organism in genbank — gene.sampling.retrieve","text":"","code":"if (FALSE) { test.spp <- gene.sampling.retrieve(organism = \"Puma\", speciesSampling = TRUE) test.pop <- gene.sampling.retrieve(organism = \"Puma\", speciesSampling = FALSE) }"},{"path":"https://cromanpa94.github.io/phruta/reference/getListConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of constraints given a taxonomic dataset — getListConstraints","title":"Get a list of constraints given a taxonomic dataset — getListConstraints","text":"Internal used generate tree constraints","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/getListConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of constraints given a taxonomic dataset — getListConstraints","text":"","code":"getListConstraints(dataset, targetColumns, byClades = FALSE)"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add local sequences to previously downloaded sequences — sq.add","title":"Add local sequences to previously downloaded sequences — sq.add","text":"function adds sequences located particular folder (default \"0.AdditionalSequences\") fasta files another folder (default \"0.Sequences\"). Files must FASTA format names files perfectly match ones previously downloaded folder (e.g. \"0.Sequences\"). function creates third new folder \"0.0.OriginalDownloaded\" containing originally downloaded sequences. sequences \"0.Sequences\" folder get replaced combined ones. Note new sequences can added even just fraction originally downloaded genes.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add local sequences to previously downloaded sequences — sq.add","text":"","code":"sq.add(folderDownloaded = \"0.Sequences\", folderNew = \"0.AdditionalSequences\")"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add local sequences to previously downloaded sequences — sq.add","text":"folderDownloaded Name folder downloaded sequences. folderNew Name folder local sequences.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add local sequences to previously downloaded sequences — sq.add","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add local sequences to previously downloaded sequences — sq.add","text":"","code":"if (FALSE) { sq.add(folderDownloaded = \"0.Sequences\",        folderNew = \"0.AdditionalSequences\") }"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Align sequences — sq.aln","title":"Align sequences — sq.aln","text":"Perform multiple sequence alignment fasta files saved given folder. Alignment conducted using \"BiocManager::install(\"DECIPHER\")\". Note function first optimizes direction sequences, aligns using \"BDECIPHER\", finally masks resulting alignment (optionally per default). masking step includes removing common gaps across species removing highly ambiguous positions. resulting aligned sequences stored new folder \"2.Alignments\".'","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align sequences — sq.aln","text":"","code":"sq.aln(   folder = \"1.CuratedSequences\",   FilePatterns = \"renamed\",   sqs.object = NULL,   mask = TRUE,   maxFractionGapsSpecies = 0.01,   ... )"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.aln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align sequences — sq.aln","text":"folder Name folder sequences align stored (character). FilePatterns string common target files relevant folder (character). Note argument can set \"NULL\" specific pattern wants analyzed. sqs.object list sequences generated sq.curate. use interested download sequences locally. mask Removes ambiguous sites (Logical, TRUE FALSE). maxFractionGapsSpecies Maximum fraction gaps per species (masked) ... Arguments passed \"DECIPHER::AlignSeqs\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.aln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align sequences — sq.aln","text":"list","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.aln.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align sequences — sq.aln","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" ) sq.aln(folder = \"1.CuratedSequences\") }"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.curate.html","id":null,"dir":"Reference","previous_headings":"","what":"Curate sequences from genbank — sq.curate","title":"Curate sequences from genbank — sq.curate","text":"downloading sequences genbank, function curates sequences based taxonomic information. Note function provides two summary datasets. First, accession numbers. Second, taxonomic information species database. taxonomy strictly follows gbif taxonomic backbone. resulting files saved \"1.CuratedSequences\". resulting files also recent curated taxonomy following gbif (selected database) taxonomic backbone.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.curate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curate sequences from genbank — sq.curate","text":"","code":"sq.curate(   filterTaxonomicCriteria = NULL,   mergeGeneFiles = NULL,   database = \"gbif\",   kingdom = NULL,   folder = \"0.Sequences\",   sqs.object = NULL,   removeOutliers = TRUE,   minSeqs = 5,   threshold = 0.05,   ranks = c(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\") )"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.curate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curate sequences from genbank — sq.curate","text":"filterTaxonomicCriteria single string terms (delimited using \"|\") listing strings used identify species dataset (character). mergeGeneFiles named list, element character vector indicating names files \"0.Sequences\" need combined single fasta file. instance, can use argument combine CO1 COI. database name database taxonomic information. Although 'gbif' faster, information animals plants. databases follow taxize::classification. kingdom Optional used database='gbif'. Two possible options: \"animals\" \"plants.\" folder name folder original sequences located (character). sqs.object list sequences generated sq.retrieve.indirect. use interested download sequences locally. removeOutliers Whether  odseq:odseq used remove outliers minSeqs minimum number sequences per locus threshold Relative odseq::odseq. important removeOutliers = TRUE ranks taxonomic ranks used examine taxonomy species 0.Sequences folder.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.curate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curate sequences from genbank — sq.curate","text":"list","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.curate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Curate sequences from genbank — sq.curate","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   database = \"gbif\", kingdom = \"animals\",   folder = \"0.Sequences\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.partitionfinderv1.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Partitionfinder v.1 — sq.partitionfinderv1","title":"Run Partitionfinder v.1 — sq.partitionfinderv1","text":"function runs partitionfinder v1 within phruta. now, analyses based genes. Please note need least two gene regions run partitionfinder.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.partitionfinderv1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Partitionfinder v.1 — sq.partitionfinderv1","text":"","code":"sq.partitionfinderv1(   folderAlignments = \"2.Alignments\",   FilePatterns = \"Masked\",   folderPartitionFinder = \"2.1.PartitionFinderv1\",   models = \"all\",   run = TRUE )"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.partitionfinderv1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Partitionfinder v.1 — sq.partitionfinderv1","text":"folderAlignments Name folder sequences align stored (character). FilePatterns string common target files relevant folder (character). Note argument can set \"NULL\" specific pattern wants analyzed. folderPartitionFinder Name new folder output files stored (string). models Models run partitionfinder (string). run Run  partitionfinder?","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.partitionfinderv1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Partitionfinder v.1 — sq.partitionfinderv1","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.partitionfinderv1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Partitionfinder v.1 — sq.partitionfinderv1","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" ) sq.aln(folder = \"1.CuratedSequences\") sq.partitionfinderv1(   folderAlignments = \"2.Alignments\",   FilePatterns = \"Masked\",   models = \"all\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.direct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve sequences from genbank — sq.retrieve.direct","title":"Retrieve sequences from genbank — sq.retrieve.direct","text":"Downloads sequences genbank (nucleotide database) particular taxa genes folder called \"0.Sequences\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.direct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve sequences from genbank — sq.retrieve.direct","text":"","code":"sq.retrieve.direct(   clades = NULL,   species = NULL,   genes = NULL,   db = \"itis\",   maxseqs = 1,   maxlength = 5000 )"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.direct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve sequences from genbank — sq.retrieve.direct","text":"clades vector listing taxonomic groups interest (character). species vector listing additional species interest (character). argument can used define additional target species ingroup species sampled outgroup (character). genes vector listing gene names interest (character). db Follows db taxize::downsteam. Choose itis, gbif, ncbi, worms, bold. maxseqs Maximum number sequences retrieve per search (taxa + gene) (numeric). maxlength Maximum length gene sequence (numeric).","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.direct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve sequences from genbank — sq.retrieve.direct","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.direct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve sequences from genbank — sq.retrieve.direct","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","title":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","text":"Downloads sequences genbank (nucleotide database) particular taxa genes folder called \"0.Sequences\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","text":"","code":"sq.retrieve.indirect(acc.table, download.sqs = FALSE)"},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","text":"acc.table accession table, ideally generated using acc.table.retrieve. data.frame must Species, Acc, gene column names. download.sqs Logical indicating whether sequences downloaded locally returned list.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/sq.retrieve.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve sequences from genbank based on a dataset of accession numbers — sq.retrieve.indirect","text":"","code":"if (FALSE) { acc.table.retrieve(  clades  = c('Felis', 'Vulpes', 'Phoca'),  species = 'Manis_pentadactyla' ,  genes   = c(\"A2AB\",\"ADORA3\",\"ADRB2\",\"APOB\",             \"APP\",\"ATP7\",\"BCHE\",\"BDNF\",             \"BMI1\",\"BRCA1\",\"BRCA2\",\"CNR1\",             \"COI\",\"CREM\",\"CYTB\",\"DMP1\",             \"EDG1\",\"ENAM\",\"FBN1\",\"GHR\",             \"IRBP\",\"ND1\",\"ND2\",\"PLCB4\",             \"PNOC\",\"RAG1a\",\"RAG1b\",\"RAG2\",             \"TTN\",\"TYR1\",\"VWF\"),  speciesLevel=TRUE )  sq.retrieve.indirect(test)  }"},{"path":"https://cromanpa94.github.io/phruta/reference/taxonomy.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Curate sequences from genbank — taxonomy.retrieve","title":"Curate sequences from genbank — taxonomy.retrieve","text":"downloading sequences genbank, function curates sequences based taxonomic information. Note function provides two summary datasets. First, accession numbers. Second, taxonomic information species database. taxonomy strictly follows gbif taxonomic backbone. resulting files saved \"1.CuratedSequences\". resulting files also recent curated taxonomy following gbif taxonomic backbone.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/taxonomy.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curate sequences from genbank — taxonomy.retrieve","text":"","code":"taxonomy.retrieve(   species_names = NULL,   database = \"gbif\",   kingdom = NULL,   ranks = c(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\") )"},{"path":"https://cromanpa94.github.io/phruta/reference/taxonomy.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curate sequences from genbank — taxonomy.retrieve","text":"species_names vector species names database name database taxonomic information. 'gbif' works animals plants. Databases follows taxize::classification kingdom Optional used database = 'gbif'. Two possible options: \"animals\" \"plants.\" ranks Taxonomic ranks retrieve target species.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/taxonomy.retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curate sequences from genbank — taxonomy.retrieve","text":"data.frame taxonomic information target species (valid database)","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/taxonomy.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Curate sequences from genbank — taxonomy.retrieve","text":"","code":"if (FALSE) { taxonomy.retrieve(   species_names = c(     \"Felis_catus\", \"PREDICTED:_Vulpes\",     \"Phoca_largha\", \"PREDICTED:_Phoca\",     \"PREDICTED:_Manis\", \"Felis_silvestris\", \"Felis_nigripes\"   ),   database = \"gbif\", kingdom = \"animals\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree inference under RAxML — tree.constraint","title":"Tree inference under RAxML — tree.constraint","text":"Performs tree inference \"RAxML\" aligned fasta sequences given folder (default \"2.Alignments\").","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree inference under RAxML — tree.constraint","text":"","code":"tree.constraint(   taxonomy_folder = \"1.CuratedSequences\",   targetColumns = c(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\",     \"species_names\"),   Topology = \"((ingroup), outgroup);\",   outgroup = NULL )"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree inference under RAxML — tree.constraint","text":"taxonomy_folder Name folder 1.Taxonomy file stored. targetColumns find \"RAxML\" run console? (string). Topology string summarizing desired topological constraint newick format. outgroup Optional required topology argument \"((ingroup), outgroup);\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree inference under RAxML — tree.constraint","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.constraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree inference under RAxML — tree.constraint","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" )  tree.constraint(   taxonomy_folder = \"1.CuratedSequences\",   targetColumns = c(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\",   \"genus\", \"species_names\"),   Topology = \"((ingroup), outgroup);\",   outgroup = \"Manis_pentadactyla\" ) tree.constraint(   taxonomy_folder = \"1.CuratedSequences\",   targetColumns = c(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\",   \"genus\", \"species_names\"),   Topology = \"((Felis), (Phoca));\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.dating.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree dating under treePL or — tree.dating","title":"Tree dating under treePL or — tree.dating","text":"Performs tree dating \"treePL\" \"PATHd-8\" based secondary calibrations. Note \"treePL\" \"PATHd-8\" must installed PATH. install \"PATHd-8\" mac \"https://gist.github.com/cromanpa94/a43bc710a17220f71d796d6590ea7fe4\" \"treePL\" can installed using homebrew (brew install brewsci/bio/treepl). Thanks Brian O'Meara Jonathan Chang, respectively.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.dating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree dating under treePL or — tree.dating","text":"","code":"tree.dating(   taxonomyFolder = \"1.CuratedSequences\",   phylogenyFolder = \"3.Phylogeny\",   ... )"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.dating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree dating under treePL or — tree.dating","text":"taxonomyFolder Name folder \"1.Taxonomy.csv\", created duing \"sq.curate\" step, stored (character). phylogenyFolder Name folder \"RAxML_bipartitions.phruta\", created duing \"tree.raxml\" step, stored (character). ... Arguments passed \"geiger::congruify.phylo\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.dating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree dating under treePL or — tree.dating","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.dating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree dating under treePL or — tree.dating","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" ) sq.aln(folder = \"1.CuratedSequences\") tree.raxml(   folder = \"2.Alignments\", FilePatterns = \"Masked\",   raxml_exec = \"raxmlHPC\", Bootstrap = 100,   outgroup = \"Manis_pentadactyla\" ) tree.dating(   taxonomyFolder = \"1.CuratedSequences\",   phylogenyFolder = \"3.Phylogeny\", scale = \"treePL\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.raxml.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree inference under RAxML — tree.raxml","title":"Tree inference under RAxML — tree.raxml","text":"Performs tree inference \"RAxML\" aligned fasta sequences given folder (default \"2.Alignments\"). Note need least two gene regions run partitioned analysis.","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.raxml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree inference under RAxML — tree.raxml","text":"","code":"tree.raxml(   folder = \"2.Alignments\",   FilePatterns = \"Masked_\",   raxml_exec = \"raxmlHPC\",   Bootstrap = 100,   outgroup,   partitioned = FALSE,   ... )"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.raxml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree inference under RAxML — tree.raxml","text":"folder Name folder sequences align stored (character). FilePatterns string common target files relevant folder (character). Note argument can set \"NULL\" specific pattern wants analized. raxml_exec find \"RAxML\" run console? (string). Bootstrap Number bootstrap replicates (numeric). outgroup single string comma-separated tip labels used outgroup \"RAxML\" See \"RAxML\" documentation details (character). partitioned Whether analyses partitioned gene (Logical). ... Arguments passed \"ips::raxml\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.raxml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree inference under RAxML — tree.raxml","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.raxml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree inference under RAxML — tree.raxml","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" ) sq.aln(folder = \"1.CuratedSequences\") tree.raxml(   folder = \"2.Alignments\", FilePatterns = \"Masked\",   raxml_exec = \"raxmlHPC\", Bootstrap = 100,   outgroup = \"Manis_pentadactyla\" ) }"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.roguetaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"RogueNaRok within phruta — tree.roguetaxa","title":"RogueNaRok within phruta — tree.roguetaxa","text":"Implements RogueNaRok algorithm rogue taxon identification within phruta","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.roguetaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RogueNaRok within phruta — tree.roguetaxa","text":"","code":"tree.roguetaxa(folder = \"3.Phylogeny\", ...)"},{"path":"https://cromanpa94.github.io/phruta/reference/tree.roguetaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RogueNaRok within phruta — tree.roguetaxa","text":"folder Name folder sequences align stored (character). ... Arguments passed \"Rogue::RogueTaxa\".","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.roguetaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RogueNaRok within phruta — tree.roguetaxa","text":"None","code":""},{"path":"https://cromanpa94.github.io/phruta/reference/tree.roguetaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RogueNaRok within phruta — tree.roguetaxa","text":"","code":"if (FALSE) { sq.retrieve.direct(   clades = c(\"Felis\", \"Vulpes\", \"Phoca\"),   species = \"Manis_pentadactyla\",   genes = c(\"ADORA3\", \"CYTB\") ) sq.curate(   filterTaxonomicCriteria = \"Felis|Vulpes|Phoca|Manis\",   kingdom = \"animals\", folder = \"0.Sequences\" ) sq.aln(folder = \"1.CuratedSequences\") tree.raxml(   folder = \"2.Alignments\", FilePatterns = \"Masked\",   raxml_exec = \"raxmlHPC\", Bootstrap = 100,   outgroup = \"Manis_pentadactyla\" ) tree.roguetaxa(folder = \"3.Phylogeny\") }"}]
